# args.ysh
#
# Usage:
#   source --builtin args.sh
#
# Args :spec {
#   flag -v --verbose "Verbosely"  # default is Bool, false
#
#   flag -P --max-procs '''
#     Run at most P processes at a time
#     ''' (Int, default=-1)
#
#   flag -i --invert '''
#     Long multiline
#     Description
#     ''' (Bool, default = true)
#
#   arg src 'Source'
#   arg src 'Dest'
#   arg times 'Foo' (Int)
# }
#
# var opt, i = parseArgs(spec, ARGV)
#
# echo "Verbose $[opt.verbose]"

# TODO: See list
# - It would be nice to keep `flag` and `arg` private, injecting them into the
#   proc namespace only within `Args`
# - We need a mechanism to share state between Args and `flag`/`arg` that is
#   run in the block passed to it
#   - It would be nice if _this was a magic param?
#     - it would be nice if 'flag' was a "method" on something?
#     - that's what it's doing, it's mutating "self"
#     - _this is the thing we're currently creating

proc Args ( ; out; ; block) {
  ## Create an args spec which can be passed to parseArgs.
  ##
  ## Example:
  ##
  ##   # NOTE: :spec will create a variable named spec
  ##   Args :spec {
  ##     flag -v --verbose ('bool')
  ##   }
  ##
  ##   var flag, i = parseArgs(spec, ARGV)

  var spec = {
    flags: [],
    args: [],
    rest: null,
  }

  eval (block) | while read line {
    json read (&parsed) <<< $line
    var spec_frag = dict(parsed)

    case (spec_frag.tag) {
      flag {
        call spec.flags->append(spec_frag.node)
      }
      arg {
        call spec.args->append(spec_frag.node)
      }
      rest {
        setvar spec.rest = spec_frag.node
      }
    }
  }
  call out->setValue(spec)
}

proc flag (short, long; type='bool', default=null) {
  ## Declare a flag within an `Args`.
  ##
  ## Examples:
  ##
  ##   Args :spec {
  ##     flag -v --verbose
  ##     flag -n --count ('int', default=1)
  ##     flag -f --file ('str')
  ##   }

  # TODO: help, make type take in a type object (ie. Bool, Int, Str)
  json write --pretty=F ({ tag: 'flag', node: { short, long, type, default, help: null } })
}

proc arg (name) {
  ## Declare a positional argument within an `Args`.
  ##
  ## Examples:
  ##
  ##   Args :spec {
  ##     arg file
  ##   }

  # TODO: type, default and help
  json write --pretty=F ({ tag: 'arg', node: { name, type: 'str', default: null, help: null } })
}

proc rest (name) {
  ## Take the remaining positional arguments within an `Args`.
  ##
  ## Examples:
  ##
  ##   Args :grep {
  ##     arg query
  ##     rest files
  ##   }

  json write --pretty=F ({ tag: 'rest', node: name })
}

func __args_getFlagName(flag) {
  if (flag.long) {
    return (flag.long[2:])
  } elif (flag.short) {
    return (flag.short[1:])
  }

  error ('No flag.long or flag.short')
}

func parseArgs(spec, argv) {
  ## Given a spec created by `Args`. Parse an array of strings `argv` per that
  ## spec.
  ##
  ## See `Args` for examples of use.

  var i = 0
  var positionalPos = 0
  var argc = len(argv)
  var args = {}
  var rest = []

  # Would like to have: var value
  var value = null
  while (i < argc) {
    var arg = argv[i]
    if (arg->startswith('-')) {
      for flag in (spec.flags) {
        if ( (flag.short and flag.short === arg) or
             (flag.long and flag.long === arg) ) {
          case (flag.type) {
            ('bool') | (null) { setvar value = true }
            int {
              setvar i += 1
              setvar value = int(argv[i])
            }
          }

          var name = __args_getFlagName(flag)
          setvar args[name] = value
        }
      }
    } elif (positionalPos >= len(spec.args)) {
      if (not spec.rest) {
        error ("Too many arguments, unexpected '$arg'")
      }

      call rest->append(arg)
    } else {
      var pos = spec.args[positionalPos]
      setvar positionalPos += 1

      case (pos.type) {
        str { setvar value = arg }
      }

      setvar args[pos.name] = value
    }

    setvar i += 1
  }

  if (spec.rest) {
    setvar args[spec.rest] = rest
  }

  return ([args, i])
}
